plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'org.conferatus.timetable.backend'
version = '0.0.1-timetable-backend'

java {
    sourceCompatibility = '17'
}

ext {
    set('springCloudVersion', "2022.0.4")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'com.h2database:h2'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework:spring-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:4.11.0'

}

test {
    useJUnitPlatform()
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}



jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        //html.outputLocation = layout.buildDirectory.dir('jacocoHtml') Доп опция, чтобы у себя можно было открыть html
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "Main.class",
                    //"<package>.Main.class" Указывайте полное имея пакета с точками
            ])
        }))
    }
}